<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="9144f816-b6c0-4a39-a9b0-bc678d1210eb" activeEnvironment="Default" name="invoices" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="73aa66e3-9d00-4729-9c86-54d7658f17ed" wadlVersion="http://wadl.dev.java.net/2009/02" name="Invoice API" type="rest" basePath="/accounting/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>The invoice service enables client upload, view, ammend and cancel invoices</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost</con:endpoint></con:endpoints><con:resource name="/invoices" path="/invoices" id="849b1bc2-8a11-4972-b965-f330def065df"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value>application/json</con:value><con:style>HEADER</con:style><con:default>application/json</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value>application/json</con:value><con:style>HEADER</con:style><con:default>application/json</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="0b588311-213e-47f0-8872-63929202af9f" method="GET"><con:description>
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:style>HEADER</con:style><con:description>The auth token for this request</con:description></con:parameter><con:parameter required="true"><con:name>invoice-api-version</con:name><con:style>HEADER</con:style><con:description>The API version</con:description></con:parameter><con:parameter required="true"><con:name>fromDate</con:name><con:style>QUERY</con:style><con:description>Filter invoices by start date range</con:description></con:parameter><con:parameter><con:name>toDate</con:name><con:style>QUERY</con:style><con:description>Filter invoices by end date range</con:description></con:parameter><con:parameter required="true"><con:name>invoiceType</con:name><con:style>QUERY</con:style><con:description>Filter invoices by type. Either SALE or PURCHASE type</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="getByDateRangeAndSALEType" id="55bddc76-eb21-4408-8520-01ff2d6869eb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/accounting/v1/invoices</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="aW52b2ljZXVzZXI6aW52b2NlcGFzcw=="/>
  <con:entry key="fromDate" value="25-12-2016"/>
  <con:entry key="invoice-api-version" value="1.0"/>
  <con:entry key="toDate" value="09-05-2018"/>
  <con:entry key="invoiceType" value="SALE"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>invoice-api-version</con:entry><con:entry>fromDate</con:entry><con:entry>toDate</con:entry><con:entry>invoiceType</con:entry><con:entry>Accept</con:entry><con:entry>Content-Type</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="1b3e59d8-0244-400c-9dd0-e299e23228b3" method="POST"><con:description>
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:style>HEADER</con:style><con:description>The auth token for this request</con:description></con:parameter><con:parameter required="true"><con:name>invoice-api-version</con:name><con:style>HEADER</con:style><con:description>The API version</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="invoiceUpload" id="551dbf9d-9170-45d9-b71e-e837a71e1688" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
  "date": "11302017",
  "country": "US",
  "frontImage": "SW52b2ljZU51bWJlcjoxMjM0NTYNCkNvbXBhbnk6S293ZWcgQW1vdW50OjM3LjUx",
  "invoiceType": "SALE"
}
</con:request><con:originalUri>http://localhost/accounting/v1/invoices</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="aW52b2ljZXVzZXI6aW52b2NlcGFzcw=="/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="invoice-api-version" value="1.0.0"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>invoice-api-version</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="393da62f-7c07-4cde-b884-4ba703979a9b" method="PUT"><con:description>
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:style>HEADER</con:style><con:description>The auth token for this request</con:description></con:parameter><con:parameter required="true"><con:name>invoice-api-version</con:name><con:style>HEADER</con:style><con:description>The API version</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="invoiceAmendment" id="7f5c5e9b-fa90-4421-8fd2-0d6e33781742" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request>{
  "id": "100",
  "country": "GB",
  "invoiceType": "SALE"
}
</con:request><con:originalUri>http://localhost/accounting/v1/invoices</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="aW52b2ljZXVzZXI6aW52b2NlcGFzcw=="/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="invoice-api-version" value="1.0.0"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>invoice-api-version</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/invoices/{invoiceId}" path="/invoices/100" id="224a29d7-4f99-4e80-afde-97f23abc64d4"><con:settings/><con:parameters><con:parameter><con:name>Content-Type</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="b4cf994a-e931-4fcf-b2af-5354da7e8532" method="GET"><con:description>
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:style>HEADER</con:style><con:description>The auth token for this request</con:description></con:parameter><con:parameter required="true"><con:name>invoice-api-version</con:name><con:style>HEADER</con:style><con:description>The API version</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="getInvoiceById" id="912d4adf-8a30-496a-ab54-8cbaac5d950b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/accounting/v1/invoices/100</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="aW52b2ljZXVzZXI6aW52b2NlcGFzcw=="/>
  <con:entry key="Accept" value="application/json"/>
  <con:entry key="invoice-api-version" value="1.0.0"/>
  <con:entry key="Content-Type" value="application/json"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>invoice-api-version</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="811a92dd-5cf1-4c33-9e21-76d3e38f52d2" method="DELETE"><con:description>
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:style>HEADER</con:style><con:description>The auth token for this request</con:description></con:parameter><con:parameter required="true"><con:name>invoice-api-version</con:name><con:style>HEADER</con:style><con:description>The API version</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="cancelInvoiceById" id="54369b04-32f4-45b2-b0f6-7495f9fbc4e8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8888</con:endpoint><con:request/><con:originalUri>http://localhost/accounting/v1/invoices/100</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="aW52b2ljZXVzZXI6aW52b2NlcGFzcw=="/>
  <con:entry key="Accept" value=""/>
  <con:entry key="invoice-api-version" value="1.0.0"/>
  <con:entry key="Content-Type" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>invoice-api-version</con:entry><con:entry>Content-Type</con:entry><con:entry>Accept</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="81627120-1390-4a51-8998-cee3bb03fc8e" port="8888" path="/" host="localhost" name="Invoice API MockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/accounting/v1/invoices/100" method="GET" resourcePath="/accounting/v1/invoices/100" id="5c95c091-72f3-4cfe-aaa1-a509c6ea6f85"><con:settings/><con:defaultResponse>getInvoiceByIdMockResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getInvoiceByIdMockResponse" id="7bbd9f4c-0291-4b6d-88f5-f24fec1392ee" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "id": "100",
  "date": "17072017",
  "country": "DE",
  "frontImage": "SW52b2ljZU51bWJlcjoxMjM0NTYNCkNvbXBhbnk6S293ZWcgQW1vdW50OjM3LjUx",
  "invoiceType": "PURCHASE"
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/accounting/v1/invoices?fromDate=25-12-2016&amp;toDate=09-05-2018&amp;invoiceType=SALE" method="GET" resourcePath="/accounting/v1/invoices?fromDate=25-12-2016&amp;toDate=09-05-2018&amp;invoiceType=SALE" id="9a10d594-fecb-4744-b948-30a5e51c69c3"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getSalesInvoiceByDateRangeResponse" id="43d7a043-5507-4a23-b9bc-73c943f2cd67" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
  {
    "id": "30",
    "date": "27122016",
    "country": "GB",
    "frontImage": "SW52b2ljZU51bWJlcjoxMjM0NTYNCkNvbXBhbnk6S293ZWcgQW1vdW50OjM3LjUx",
    "invoiceType": "SALE"
  },
  {
    "id": "103",
    "date": "05012017",
    "country": "ZA",
    "frontImage": "SW52b2ljZU51bWJlcjoxMjM0NTYNCkNvbXBhbnk6S293ZWcgQW1vdW50OjM3LjUx",
    "invoiceType": "SALE"
  },
  {
    "id": "107",
    "date": "07012018",
    "country": "CO",
    "frontImage": "SW52b2ljZU51bWJlcjoxMjM0NTYNCkNvbXBhbnk6S293ZWcgQW1vdW50OjM3LjUx",
    "invoiceType": "SALE"
  }
]
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/accounting/v1/invoices" method="POST" resourcePath="/accounting/v1/invoices" id="b66a32d9-7aac-4de4-89ef-a7664cb78d93"><con:settings/><con:defaultResponse>InvoiceUpload</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="InvoiceUpload" id="e00ad713-a7dc-43e3-8797-fe082c32bd54" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "id": "999",
  "date": "11302017",
  "country": "DE",
  "frontImage": "SW52b2ljZU51bWJlcjoxMjM0NTYNCkNvbXBhbnk6S293ZWcgQW1vdW50OjM3LjUx",
  "invoiceType": "SALE"
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/accounting/v1/invoices" method="PUT" resourcePath="/accounting/v1/invoices" id="117dcd59-d297-4031-8525-fb7a68eaa43f"><con:settings/><con:defaultResponse>invoiceAmendmentResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="invoiceAmendmentResponse" id="00197c97-4aad-4927-9faa-f2290c4e8711" httpResponseStatus="204" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/accounting/v1/invoices/100" method="DELETE" resourcePath="/accounting/v1/invoices/100" id="05212eec-a295-47a5-ace5-9dce4628fa24"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="invoiceCancellationResponse" id="1f994497-52d1-42e2-8437-2e91b88bbd1a" httpResponseStatus="204" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/accounting/v1/swagger" method="GET" resourcePath="/accounting/v1/swagger" id="6f4e8f6b-146e-42bf-909b-c9aece42f2a3"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="swaggerContract" id="f716d6ee-2124-4c52-a17e-07935e3bd120" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "swagger": "2.0",

  "schemes": [
    "http"
  ],

  "basePath": "/accounting/v1",

  "host": "localhost",

  "info" : {
    "description" : "The invoice service enables client upload, view, ammend and cancel invoices",
    "version" : "v1",
    "title": "Invoice API"
  },

  "consumes": [
    "application/json"
  ],

  "produces": [
    "application/json"
  ],


  "tags":[{
           "name": "Invoice Upload",
           "description": " "
          },
          {
           "name": "Invoice List",
           "description": " "
          },
          {
           "name": "Invoice Amendment",
           "description": " "
          },
          {
           "name": "Invoice Cancellation",
           "description": " "
          }
  ],



  "definitions": {
    "invoice": {
      "description": "An invoice presentation",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "invoiceType": {
          "enum": [
            "PURCHASE",
            "SALE"
          ],
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "frontImage": {
          "type": "string"
        },
        "backImage": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "date",
        "country",
        "invoiceType"
      ]
    },

    "invoices": {
      "type" : "array",
      "minItems": 1,
      "maxItems": 100,
      "items":{
        "$ref": "#/definitions/invoice"
      }
    },

    "newinvoice": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "frontImage": {
          "type": "string"
        },
        "backImage": {
          "type": "string"
        },
        "invoiceType": {
          "enum": [
            "PURCHASE",
            "SALE"
          ],
          "type": "string"
        }
      },
      "required": [
        "date",
        "country",
        "invoiceType"
      ]
    },

    "partialinvoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "frontImage": {
          "type": "string"
        },
        "backImage": {
          "type": "string"
        },
        "invoiceType": {
          "enum": [
            "PURCHASE",
            "SALE"
          ],
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },

    "ErrorMessageResponse": {
      "description": "Error response message",
      "properties": {
        "code": {
          "minLength": 1,
          "type": "string"
        },
        "correlationId": {
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "correlationId",
        "code",
        "description"
      ],
      "type": "object"
    }

  },

  "parameters": {
    "trait:paged:start": {
      "description": "The first page of results to return",
      "type": "number",
      "in": "query",
      "name": "start",
      "required": true
    },
    "trait:paged:page": {
      "description": "The number of pages of results to return",
      "type": "number",
      "in": "query",
      "name": "page",
      "required": true
    },
    "trait:secured:Authorization": {
      "description": "The auth token for this request",
      "type": "string",
      "in": "header",
      "name": "Authorization",
      "required": true
    },
    "trait:additionalHeader:invoice-api-version": {
      "required": true,
      "description": "The API version",
      "type": "string",
      "in": "header",
      "name": "invoice-api-version"
    }
  },

  "responses": {
    "trait:secured:401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/ErrorMessageResponse"
      }
    }
  },

  "paths": {
    "/invoices": {
      "get": {
      "tags": ["Invoice List"],
        "responses": {
          "200": {
            "description": "A list of invoices",
            "schema": {
              "$ref": "#/definitions/invoices"
            }
          },
          "401": {
            "$ref": "#/responses/trait:secured:401"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:secured:Authorization"
          },
          {
            "$ref": "#/parameters/trait:additionalHeader:invoice-api-version"
          },
          {
            "required": true,
            "description": "Filter invoices by start date range",
            "type": "string",
            "in": "query",
            "name": "fromDate"
          },
          {
            "description": "Filter invoices by end date range",
            "type": "string",
            "in": "query",
            "name": "toDate"
          },
          {
            "description": "Filter invoices by type. Either SALE or PURCHASE type",
            "type": "string",
            "in": "query",
            "name": "invoiceType",
            "required": true
          }
        ]
      },
      "post": {
        "tags": ["Invoice Upload"],
        "responses": {
          "200": {
            "description": "Invoice successfully created",
            "schema": {
              "$ref": "#/definitions/invoice"
            }
          },
          "401": {
            "$ref": "#/responses/trait:secured:401"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:secured:Authorization"
          },
          {
            "$ref": "#/parameters/trait:additionalHeader:invoice-api-version"
          },
          {
            "schema": {
              "$ref": "#/definitions/newinvoice"
            },
            "in": "body",
            "name": "body"
          }
        ]
      },
      "put": {
        "tags": ["Invoice Amendment"],
        "responses": {
          "204": {
            "description": "Invoice successfully amended - no content"
          },
          "401": {
            "$ref": "#/responses/trait:secured:401"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:secured:Authorization"
          },
          {
            "$ref": "#/parameters/trait:additionalHeader:invoice-api-version"
          },
          {
            "schema": {
              "$ref": "#/definitions/partialinvoice"
            },
            "in": "body",
            "name": "body"
          }
        ]
      }
    },
    "/invoices/{invoiceId}": {
      "get": {
      "tags": ["Invoice List"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/invoice"
            }
          },
          "401": {
            "$ref": "#/responses/trait:secured:401"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:secured:Authorization"
          },
          {
            "$ref": "#/parameters/trait:additionalHeader:invoice-api-version"
          }
        ]
      },
      "delete": {
        "tags": ["Invoice Cancellation"],
        "responses": {
          "204": {
            "description": "Invoice successfully deleted - no content"
          },
          "401": {
            "$ref": "#/responses/trait:secured:401"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:secured:Authorization"
          },
          {
            "$ref": "#/parameters/trait:additionalHeader:invoice-api-version"
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "invoiceId",
          "required": true
        }
      ]
    }
  }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>